import React, { useState, useEffect } from 'react';
import { AlertTriangle, CheckCircle, Info, Loader2, BookOpen, Share2, FileText, Sparkles, Zap, HelpCircle, History, GitCompare, Plus } from 'lucide-react';
import { analyzeText } from './utils/newsAnalyzer';
import { AnalysisResult, HistoricalAnalysis } from './utils/types';
import { CredibilityMeter } from './components/CredibilityMeter';
import { Button } from './components/ui/button';
import { ThemeToggle } from './components/theme-toggle';
import { motion, AnimatePresence } from 'framer-motion';
import { EducationalResources } from './components/EducationalResources';
import { ContentStats } from './components/ContentStats';
import { SourceDetails } from './components/SourceDetails';
import { HistoryPanel } from './components/HistoryPanel';
import { StoryTimeline } from './components/StoryTimeline';
import { PatternAnalysis } from './components/PatternAnalysis';
import { SimilarityMatrix } from './components/SimilarityMatrix';
import { ReportGenerator } from './components/ReportGenerator';

function App() {
  const [text, setText] = useState('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [result, setResult] = useState<AnalysisResult | null>(null);
  const [charCount, setCharCount] = useState(0);
  const [showHelp, setShowHelp] = useState(false);
  const [history, setHistory] = useState<HistoricalAnalysis[]>([]);
  const [showHistory, setShowHistory] = useState(false);
  const [comparisonMode, setComparisonMode] = useState(false);
  const [comparisonTexts, setComparisonTexts] = useState<string[]>([]);
  const [comparisonResults, setComparisonResults] = useState<AnalysisResult[]>([]);

  useEffect(() => {
    const savedHistory = localStorage.getItem('analysis-history');
    if (savedHistory) {
      setHistory(JSON.parse(savedHistory));
    }
  }, []);

  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newText = e.target.value;
    setText(newText);
    setCharCount(newText.length);
  };

  const handleAnalysis = async () => {
    if (!text.trim()) return;
    
    setIsAnalyzing(true);
    try {
      const analysis = await analyzeText(text);
      setResult(analysis);
      
      // Save to history
      const newAnalysis: HistoricalAnalysis = {
        id: crypto.randomUUID(),
        timestamp: new Date().toISOString(),
        text,
        result: analysis,
        statistics: analysis.statistics
      };
      
      const updatedHistory = [newAnalysis, ...history].slice(0, 10);
      setHistory(updatedHistory);
      localStorage.setItem('analysis-history', JSON.stringify(updatedHistory));
    } catch (error) {
      console.error('Analysis failed:', error);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleAddComparison = async () => {
    if (!text.trim()) return;
    
    setIsAnalyzing(true);
    try {
      const analysis = await analyzeText(text);
      setComparisonTexts([...comparisonTexts, text]);
      setComparisonResults([...comparisonResults, analysis]);
      setText('');
    } catch (error) {
      console.error('Analysis failed:', error);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleShare = async () => {
    if (!result) return;
    
    const shareText = `
      Content Analysis Results:
      
      Credibility Score: ${result.credibilityScore}/100
      Factual Assessment: ${result.factCheck.isFactual ? '✓ Verified' : '⚠ Unverified'}
      
      Key Findings:
      ${result.factCheck.explanation}
      
      Analysis Details:
      - Sentiment: ${result.sentiment?.label} (${result.sentiment?.score.toFixed(2)})
      - Readability: ${result.readability?.level} (Score: ${result.readability?.score})
      - Bias Assessment: ${result.bias?.explanation}
      
      Generated by AI Fake News Detector
    `.trim();
    
    try {
      await navigator.clipboard.writeText(shareText);
      alert('Analysis copied to clipboard!');
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const handleHistorySelect = (analysis: HistoricalAnalysis) => {
    setText(analysis.text);
    setResult(analysis.result);
    setCharCount(analysis.text.length);
    setShowHistory(false);
  };

  const handleHistoryDelete = (id: string) => {
    const updatedHistory = history.filter(item => item.id !== id);
    setHistory(updatedHistory);
    localStorage.setItem('analysis-history', JSON.stringify(updatedHistory));
  };
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-background to-secondary/20 dark:from-background dark:to-background">
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-5xl mx-auto">
          {/* Header */}
          <div className="text-center mb-12 relative">
            <div className="absolute right-0 top-0 flex items-center gap-2">
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setShowHistory(!showHistory)}
                className="relative"
              >
                <History className="h-5 w-5" />
                {history.length > 0 && (
                  <span className="absolute -top-1 -right-1 bg-primary text-primary-foreground rounded-full w-4 h-4 text-xs flex items-center justify-center">
                    {history.length}
                  </span>
                )}
              </Button>
              <ThemeToggle />
            </div>
            <motion.div
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              className="space-y-4"
            >
              <div className="flex justify-center items-center gap-3">
                <Zap className="h-12 w-12 text-primary" />
                <h1 className="text-5xl font-bold text-foreground">
                  AI Fake News Detector
                </h1>
              </div>
              <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
                Advanced content analysis powered by Google's Gemini AI
              </p>
            </motion.div>
          </div>

          {/* Main Content */}
          <div className="space-y-8">
            {/* History Panel */}
            <AnimatePresence>
              {showHistory && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  className="overflow-hidden"
                >
                  <HistoryPanel
                    history={history}
                    onSelect={handleHistorySelect}
                    onDelete={handleHistoryDelete}
                  />
                </motion.div>
              )}
            </AnimatePresence>

            {/* Input Card */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="bg-card rounded-xl shadow-lg p-8 border border-border/50"
            >
              <div className="mb-6">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center gap-2">
                    <FileText className="h-6 w-6 text-primary" />
                    <label 
                      htmlFor="content" 
                      className="text-xl font-semibold text-foreground"
                    >
                      Content Analysis
                    </label>
                  </div>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => setShowHelp(!showHelp)}
                  >
                    <HelpCircle className="h-5 w-5" />
                  </Button>
                </div>
                <p className="text-sm text-muted-foreground mb-4">
                  Paste your article, news content, or any text you'd like to analyze for credibility and factual accuracy.
                </p>
                <div className="relative">
                  <textarea
                    id="content"
                    rows={8}
                    className="w-full px-4 py-3 rounded-lg bg-background border border-input focus:ring-2 focus:ring-ring focus:border-transparent transition text-base shadow-sm"
                    placeholder="Enter your content here..."
                    value={text}
                    onChange={handleTextChange}
                    style={{ resize: 'vertical' }}
                  />
                  <div className="absolute bottom-3 right-3 text-xs bg-muted px-2 py-1 rounded-md text-muted-foreground">
                    {charCount} characters
                  </div>
                </div>
              </div>

              <div className="flex gap-3">
                <Button
                  onClick={handleAnalysis}
                  disabled={isAnalyzing || !text.trim()}
                  className="flex-1 md:flex-none"
                  size="lg"
                >
                  {isAnalyzing ? (
                    <>
                      <Loader2 className="animate-spin mr-2" />
                      Analyzing with AI...
                    </>
                  ) : (
                    <>
                      <Sparkles className="mr-2 h-4 w-4" />
                      Analyze Content
                    </>
                  )}
                </Button>
                
                {text.trim() && (
                  <Button
                    variant="outline"
                    onClick={() => {
                      setText('');
                      setCharCount(0);
                      setResult(null);
                    }}
                    size="lg"
                  >
                    Clear
                  </Button>
                )}
              </div>
            </motion.div>

            {/* Comparison Mode Toggle */}
            <div className="flex items-center justify-between">
              <Button
                variant="outline"
                onClick={() => {
                  setComparisonMode(!comparisonMode);
                  if (!comparisonMode) {
                    setComparisonTexts([]);
                    setComparisonResults([]);
                  }
                }}
                className="flex items-center gap-2"
              >
                <GitCompare className="h-4 w-4" />
                {comparisonMode ? 'Exit Comparison' : 'Compare Multiple Versions'}
              </Button>
              
              {comparisonMode && (
                <Button
                  onClick={handleAddComparison}
                  disabled={isAnalyzing || !text.trim()}
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add to Comparison
                </Button>
              )}
            </div>

            {/* Comparison Results */}
            {comparisonMode && comparisonResults.length > 0 && (
              <div className="space-y-8">
                <SimilarityMatrix
                  texts={comparisonTexts}
                  results={comparisonResults}
                />
                <StoryTimeline
                  analyses={comparisonTexts.map((text, i) => ({
                    id: `version-${i}-${new Date().toISOString()}`,
                    timestamp: new Date().toISOString(),
                    text,
                    result: comparisonResults[i]
                  }))}
                />
                <PatternAnalysis
                  analyses={comparisonTexts.map((text, i) => ({
                    id: `version-${i}-${new Date().toISOString()}`,
                    timestamp: new Date().toISOString(),
                    text,
                    result: comparisonResults[i]
                  }))}
                />
              </div>
            )}

            {/* Help Section */}
            <AnimatePresence>
              {showHelp && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  className="overflow-hidden"
                >
                  <div className="bg-card rounded-xl shadow-lg p-8 border border-border/50">
                    <h2 className="text-2xl font-bold mb-6 flex items-center gap-2">
                      <BookOpen className="h-6 w-6 text-primary" />
                      How to Use This Tool
                    </h2>
                    <EducationalResources />
                  </div>
                </motion.div>
              )}
            </AnimatePresence>

            {/* Results Section */}
            <AnimatePresence mode="wait">
              {result && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className="bg-card rounded-xl shadow-lg p-8 border border-border/50"
                  id="analysis-results"
                >
                  <div className="flex justify-between items-start mb-8">
                    <h2 className="text-2xl font-bold flex items-center gap-2">
                      <Sparkles className="h-6 w-6 text-primary" />
                      Analysis Results
                    </h2>
                    <Button variant="outline" size="sm" onClick={handleShare}>
                      <Share2 className="h-4 w-4 mr-2" />
                      Share Results
                    </Button>
                  </div>

                  {/* Content Statistics */}
                  <div className="mb-8">
                    <h3 className="text-lg font-semibold mb-4">Content Overview</h3>
                    <ContentStats statistics={result.statistics} />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
                    {/* Credibility Score */}
                    <div className="flex flex-col items-center justify-center p-6 bg-card border border-border rounded-lg shadow-sm">
                      <CredibilityMeter score={result.credibilityScore} />
                      <p className="text-sm font-medium mt-4 text-center">
                        {result.credibilityScore >= 80 ? 'Highly credible content' :
                         result.credibilityScore >= 60 ? 'Moderately credible content' :
                         'Low credibility content - exercise caution'}
                      </p>
                    </div>

                    {/* Fact Check Result */}
                    <div className="flex flex-col justify-center">
                      <h3 className="text-lg font-semibold mb-3 flex items-center">
                        <BookOpen className="text-primary mr-2" />
                        Fact Check Analysis
                      </h3>
                      <div className={`p-4 rounded-lg border ${
                        result.factCheck.isFactual 
                          ? 'bg-success/10 border-success/30 text-success-foreground dark:border-success/50' 
                          : 'bg-destructive/10 border-destructive/30 text-destructive-foreground dark:border-destructive/50'
                      }`}>
                        <div className="flex items-center gap-2 mb-2">
                          {result.factCheck.isFactual ? (
                            <CheckCircle className="h-5 w-5 text-success" />
                          ) : (
                            <AlertTriangle className="h-5 w-5 text-destructive" />
                          )}
                          <span className="font-medium">
                            {result.factCheck.isFactual ? 'Verified Content' : 'Unverified Content'}
                          </span>
                        </div>
                        <p className="text-sm text-foreground">
                          {result.factCheck.explanation}
                        </p>
                      </div>
                    </div>
                  </div>

                  {/* Source Details */}
                  {result.factCheck.sources && result.factCheck.sources.length > 0 && (
                    <div className="mb-8">
                      <h3 className="text-lg font-semibold mb-4">Source Verification</h3>
                      <SourceDetails sources={result.factCheck.sources} />
                    </div>
                  )}

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                    {/* Analysis Cards */}
                    {['Warnings', 'Analysis', 'Suggestions'].map((section, index) => (
                      <div key={section} className="bg-card border border-border rounded-lg p-4 shadow-sm">
                        <h3 className="text-lg font-semibold mb-3 flex items-center">
                          {index === 0 && <AlertTriangle className="text-warning mr-2 h-5 w-5" />}
                          {index === 1 && <Info className="text-primary mr-2 h-5 w-5" />}
                          {index === 2 && <Sparkles className="text-primary mr-2 h-5 w-5" />}
                          {section}
                        </h3>
                        {index === 0 && (
                          <ul className="space-y-2">
                            {result.warnings.map((warning, i) => (
                              <li key={i} className="flex items-start text-sm">
                                <span className="mr-2 text-warning">•</span>
                                <span className="text-foreground">{warning}</span>
                              </li>
                            ))}
                            {result.warnings.length === 0 && (
                              <li className="flex items-center text-sm text-success">
                                <CheckCircle className="mr-2 h-4 w-4" />
                                No warnings detected
                              </li>
                            )}
                          </ul>
                        )}
                        {index === 1 && (
                          <div className="space-y-4">
                            {[
                              { label: 'Sentiment', value: `${result.sentiment?.label} (${result.sentiment?.score.toFixed(2)})` },
                              { label: 'Readability', value: `${result.readability?.level} (Score: ${result.readability?.score})` },
                              { label: 'Bias', value: result.bias?.explanation }
                            ].map((item, i) => (
                              <div key={i}>
                                <p className="text-sm font-medium flex items-center gap-2">
                                  <span className="w-2 h-2 rounded-full bg-primary"></span>
                                  {item.label}
                                </p>
                                <p className="text-sm text-foreground ml-4">
                                  {item.value}
                                </p>
                              </div>
                            ))}
                          </div>
                        )}
                        {index === 2 && (
                          <ul className="space-y-2">
                            {result.suggestions.map((suggestion, i) => (
                              <li key={i} className="flex items-start text-sm">
                                <span className="mr-2 text-primary">•</span>
                                <span className="text-foreground">{suggestion}</span>
                              </li>
                            ))}
                          </ul>
                        )}
                      </div>
                    ))}
                  </div>

                  {/* Report Generator Section */}
                  <div className="mt-8 pt-8 border-t border-border">
                    <h3 className="text-lg font-semibold mb-4">Export & Share</h3>
                    <ReportGenerator result={result} text={text} />
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;